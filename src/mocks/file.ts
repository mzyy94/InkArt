export async function readFileAsArrayBuffer(file: File): Promise<ArrayBuffer> {
  return await new Promise((resolve, reject) => {
    const fr = new FileReader();
    fr.onload = () => resolve(fr.result as ArrayBuffer);
    fr.onerror = () => reject(fr.error);
    fr.readAsArrayBuffer(file);
  });
}

export async function fixBrokenFile(file: File) {
  const { name, type } = file;

  // Workaround to fix broken file data generated by msw
  const buffer = await readFileAsArrayBuffer(file).then((buffer) => {
    const decoder = new TextDecoder();
    const decoded = decoder.decode(buffer);
    // @ts-ignore
    return new Uint8Array([].map.call(decoded, (c) => c.charCodeAt(0))).buffer;
  });

  return new File([buffer], name, { type });
}
